#!/usr/bin/r3

REBOL[]

WIDTH: 42


; GENERAL PURPOSE

fail: func [msg] [
  if block? msg [msg: spaced msg]
  print ["Failed:" msg]
  quit 1
]

prompt: func [msg] [
  write-stdout msg
  input
]


; SPECIFIC

diff-date: func [d1 d2] [
  (d1.time - d2.time) / 24:0
  + (d1.date - d2.date)
]

wdays: make map! [
  lun 1
  mar 2
  mer 3
  gio 4
  ven 5
  sab 6
  dom 7
]

smart-date: func [d] [
  if date? d [return d]
  let i
  case [
    all [word? d, i: wdays.:d] [
      (i - T0.weekday) mod 7 + T0
    ]
  ]
]

parse-task: func [
  data [block!]
  <local> d t
] [
  t: make map! 6

  for-each x data [
    if x == 0 [x: 0.0]
    switch type-of x [
      text! [t.desc: x]
      time! [t.time: x]
      integer! [t.days: x]
      date! [t.date: x]
      decimal! [t.mean: x]
      percent! [t.score: x]
    ] else [ fail spaced ["??" mold x] ]
  ]
  return t
]

load-task: func [data [block!]] [
  t: parse-task data
  t.desc: default [""]
  t.date: default [now/precise]
  t.date.zone: null
  t.date.time: default [0:0]
  t.time: default [0:10]
  t.days: default [1]
  t.mean: default [0.0]
  t.mean: my max 0
  update-task-score t
  return t
]

load-task-file: func [file] [
  tasks: make block! 8
  for-each l read/lines file [
    l: load l
    if 1 = length-of l [
      either date? l.1 [Timer: l.1]
      [fail ["Syntax error:" form l]]
    ]
    append tasks load-task l
  ]
  return tasks
]

form-task: func [t w] [
  t: spaced [
    format -5 round to-percent t.score
    format [-5 "/" 2] :[t.time t.days]
    either w
    [ format w - 14 t.desc ]
    [ t.desc ]
  ]
  replace t "-000%" "   0%"
  replace t "000%" "  0%"
]

write-tasks: func [file tasks] [
  let text: make text! 8
  if Timer [ append text :[Timer newline]]
  for-each t tasks [
    append text spaced [
      mold t.desc
      t.time
      to-integer t.days
      to-decimal t.mean
      t.date
      newline
    ]
  ]
  if file [write file text]
  else [print text]
]

sort-tasks: func [tasks] [
  sort/compare tasks [a b] -> [a.score < b.score]
]

show-tasks: func [tasks n] [
  let t
  if Timer [print ["TIMER:" Timer]]
  if n [
    t: tasks.:n
    update-task-score t
    print form-task t _
    return
  ]
  n: length-of tasks
  count-down n length-of tasks [
    t: tasks.:n
    update-task-score t
    print [format -2 n form-task t WIDTH]
  ]
]

update-task-score: func [task <local> d t] [
  d: task.days
  t: now/precise, t.zone: null
  t: d - diff-date t task.date
  task.score: to-percent either t < 0
  [ t / d ] 
  [ task.mean * 0:1 / task.time * t ]
]

change-task: func [t t2 <local> d] [
  for-each k [desc time days date mean] [
    if t2.:k [t.:k: t2.:k]
  ]
  if t2.score [
    d: now/precise, d.zone: null
    d: t.days - diff-date d t.date 
    t.mean: t.time / 0:1 / d * to-decimal t2.score
  ] else [update-task-score t]
  return t
] 

update-task: func [
  task [map!] "task"
  time [time! any-number!]
  <local> t d
] [
  if time? time [time: me / 0:1]
  t: now/precise, t.zone: null
  d: diff-date t task.date
  task.date: t
  t: task.days - d
  d: task.days
  if t < 0 [task.mean: time / d, task.score: t / task.days]
  else [
    task.mean: me * t + time / d
    task.score: to-percent task.mean * 0:1 / task.time * task.days
  ]
  return task
]


; ==== MAIN ====

Timer: _

file: to-file any [
  pick system.script.args 1
  join system.options.home %tasks.reb
]

Tasks: load-task-file file
Curr: _

forever [
  if Curr = 0 [Curr: _]
  if not Curr [sort-tasks Tasks]
  show-tasks Tasks Curr

  forever [
    trap [cmd: load prompt "task>"] else [break]
    print "??"
  ]

  if Curr [
    t: tasks.:Curr
    parse  cmd [
      [end] (Curr: _)
      | '@ (
        time: now/precise
        if Timer [
          time: 24:0 * diff-date time Timer
          update-task t time
          print ["TIMER STOP:" time]
          Timer: _
        ] else [
          Timer: time
          ;print ["TIMER START:" time]
        ]
      )
      | 'd (remove at Tasks Curr, Curr: _)
      | 'x (write-tasks file Tasks, quit)
      | 'w (write-tasks file Tasks)
      | 'q (quit)
      | '+ set x [time! | any-number!] (
          update-task t x
        )
      | '- set x [time! | any-number!] (
          update-task t negate x
        )
      | set x [ text! | time! | any-number! | date! | percent!] (
          if x == 0 [
            x: now/precise, x.zone: null
            t.date: x, t.mean: 0.0
          ] else [change-task t parse-task cmd]
        )
      | (print "??")
    ] 
  ] else [
    parse  cmd [
      end
      | '@ (
        time: now/precise
        if Timer [
          time: 24:0 * diff-date time Timer
          print ["TIMER STOP:" time]
          Timer: _
        ] else [
          Timer: time
          ;print ["TIMER START:" time]
        ]
      )
      | 'x (write-tasks file Tasks, quit)
      | 'w (write-tasks file Tasks)
      | 'p (write-tasks _ Tasks)
      | 'q (quit)
      | '+ (append Tasks load-task next cmd)
      | set n [integer! | text! | word! ]
        (
          if not integer? n [
            for-next t Tasks [
              if t.1.desc = find t.1.desc n [
                n: index-of t
                break
              ]
            ] then [n: _]
          ]
          Curr: n
        )
    ] 
  ]
]
; vim: set syn=rebol et sw=2:
