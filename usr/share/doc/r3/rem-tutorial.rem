REBOL []
; setup
(tit: "ReM format tutorial" _)
demo: func [x /rem src t: b:] [
  if not block? x [x: reduce [x]]
  t: node x
  r: either rem [src]
  [ replace/all mold/only x "^^" "^" ]
  string-begin: charset "\"{" ;}
  dquo-spec: charset {^\\"}
  dquo-esc: charset {"(} ;)
  bra-spec: charset {^\\{}}
  bra-esc: charset {{}(} ;)
  n: 0
  node [
    div .rem raw-text r
    p [i"(load-rem)" "↓"]
    div .dot raw-text mold t
    p [i"(mold-html)" "↓"]
    div .html x
    br
  ]
]
note: func [x] [
  p [span background: "yellow" b "NOTE" space x]
]
; end setup

doc [
header [
  viewport 1
  title tit
  style {
    body  {font-size: 12pt}
    h1  {text-align: center}
    div {padding: 1ex}
    .html, .rem {border: 2px solid;
    }
    .html  {border-color: blue}
    .rem  {border-color: red}
    .dot  {background: #dddddd;}
    .rem, .dot {
      font-family: monospace;
      font-size: "11pt";
      white-space: pre-wrap
    }
  }
]
body [

h1 tit
a /href "#toc" "[TOC]"

h2 ["Legenda"]
p .rem {ReM code}
p {is processed by LOAD-REM, that converts it into a}
p .dot {document tree(DoT)}
p {then MOLD-HTML converts DoT to }
p .html {HTML}

h2 "Text"
demo "Text must be written as strings, with braces or double quotes."
demo/rem
  "The escape char in ReM is \\ -- but only before \\ \{ \} \" \(28)"
  {"The escape char in ReM is \\\\ -- but only before \\\\ \\{ \\} \\\" \\(28)"}
demo/rem
  "Otherwise \\ is literal: \a \n \/ \-"
  {"Otherwise \\\\ is literal: \\a \\n \\/ \\-a"}
demo "< , & , > and ^ are literal"
demo [
  {Space}{ must }{be} space {explicitly inserted:}
  br
  {This} {is} {one} {long} {word.}
]

h2 "Tags"
p  ["Tags are variadic functions, whose syntax is: " i "tag-name [attributes] [content];"" content is a string or a block, return value is a DoT block"]
note "Tag names are like in HTML, but DOC instead of <HTML>, HEADER instead of <HEAD>."
demo [
  p [{paragraph with breakline} br
    b {bold} { normal } i {italic}
  ]
]

h2 "Attributes"
p [{Generic attributes are in the form } i {/name value} {; value is evaluated}]
demo [p /align first["right" "left"] [
  {first line} br {second line}
] ]
p "Some attributes can be written more quickly:"

h3   "Special attributes: STYLE, ID, CLASS"
p [{Style properties can be written as } i {name: value} {; value is evaluated.}]
demo [span font-size: to-percent 7 / 4 color: 'red "Big red text"]
p [{Id and class attributes can be written respectively as } i "#some_id" { and } i {.some_class}]
demo [
  style {
    #bluey, .bluey {color: blue; background: yellow}
    .big {font-size: 200%}
  }
  span #bluey "Blue on yellow"
  br
  span .bluey .big "Big blue on yellow"
]
note {The STYLE tag value is a CSS string.}

h3   "Special attributes: HREF and SRC"
p "URLs and FILES are HREF and SRC attributes:"
demo [
  a https://github.com/metaeducation/ren-c
  img http://giuliolunati.altervista.org/r3/ren-c-logo.png height: "3.5ex" space
  a %/ font-size: "200%" "ROOT"
]

h2 "Table of Contents"
p {If an element exist with ID = "TOC", it will be filled with a copy of every Hn element, placed after other contents:}
demo [div #toc font-size: 50%
  p /align 'center b i {(-- Here you can place ToC header --)}
] 
note {The ToC filling happens when closing BODY element, thus if you want the ToC you must explicitly call BODY}

h2 "Defining things"

h3   "Functions"
p "Functions, maps and objects produce no output -- Handy for definitions:"
demo [
  bi: func [x] [b i x]
  b+i: func [x y] [node [b x "+" i y]]
  bi "bold italic" space  b+i "bold" "italic"
]
note "Enfix is ok:"
demo [
  b+i: enfix func [x y] [node [b x "+" i y]]
  "bold" b+i "italic"
]

h3   {"Variables" & hiding}
p ["When setting a word to another type, remember that it " i "produce" " output:"]
demo [three: #"3" two: "2" one: 1
one two three]
p "However you can easily hide it with a GROUP ending in BLANK:"
demo [(three: #"3" two: "2" one: 1 _)
one two three]

h2 "Smart text"
p "The function 'smart-text recognize some asciidoc-like notation with special chars * / ^ _ \ :"
demo [smart-text "*bold* /italic/ ^superscript^ _subscript_"]
note {if you find "smart-text" too long, define a shortcut:}
demo [s: :smart-text s"That's /very/ *smart*"]
note {At the moment nesting doesn't work:}
demo [s"*bold but /not italic/*"]

h3  "Quoting"
p "Special chars can be quoted with \ :"
demo [s"star\*, *bold \* star*"]
note s"However a space (or tab or newline or end-of-string) after an /opening/ special char 'disarm' it, and you don't need to quote:"
demo [s{* / ^ _}]

h3  "AsciiMath notation"
p "for compatibility with AsciiMath notation, chars in `...` aren't special:"
demo [s "`2*3*4/5/6` `int_0^1 x^2 dx`"]
p "But obviously you can quote:"
demo [s"\`*bold* /italic/ ^top^ _down_\`"]

h3  "Breaklines"
p s"'smart-text convert /n/ blank lines in /n+1/ breaklines:"
demo [s{no
breakline; two

breaklines; three


breaklines}]
p s{If you need single breakline, use /\\\\ + newline/ or /\\\\ + space:/}
demo [s{ one\ breakline; another \
breakline}]

h3  "Process-text"
p "If you want smart-text to be implicitly applied, set 'process-text to 'smart-text:"
demo [process-text: :smart-text p "/italic/ *bold*"]
p "You can also set 'process-text to your own function:"
demo [process-text: func [x] [uppercase copy x] p "uppercase text" process-text: _] 

h3  "Raw-text"
p "You can bypass 'process-text with 'raw-text:"
demo [process-text: :smart-text "this is /smart text/" br raw-text "this /isn't/"]

] ;body
] ;doc
;; vim: set syn=rem sw=2 ts=2 sts=2 expandtab:
